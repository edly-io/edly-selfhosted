const { Popover } = await import('@typeform/embed-react');
const { getAuthenticatedHttpClient } = await import('@edx/frontend-platform/auth');
const { useState, useEffect } = await import('react');

/*
Display an onboarding form. This form is displayed just once: after it is submitted, we
make a POST API call to /api/onboarding-survey/ to tell the backend not to display the form
again. In addition, making a GET to this same endpoint tells the frontend whether to
display the form. A negative response is stored in local storage, to minimize API calls.
*/


const OnboardingSurvey = () => {
  const [showForm, setShowForm] = useState(null);
  const [userData, setUserData] = useState({
    user: '',
    email: ''
  });
  const [loading, setLoading] = useState(true);

  const apiUrl = `${getConfig().LMS_BASE_URL}/api/onboarding-survey/`;
  const localStorageKey = "edly_onboarding_form_filled";

  const handleOnSubmit = () => {
    const updateOnboardingFormStatus = async () => {
      try {
        await getAuthenticatedHttpClient().post(apiUrl, {
          form_filled: true
        })
        localStorage.setItem(localStorageKey, "true");
      } catch { }
    }

    updateOnboardingFormStatus();
  }

  useEffect(() => {
    const fetchFormData = async () => {
      try {
        const response = await getAuthenticatedHttpClient().get(apiUrl);
        setShowForm(response.data.show_form);
        setUserData({
          user: response.data.username,
          email: response.data.email
        })

        if (!response.data.show_form) {
          // Cache negative responses
          localStorage.setItem(localStorageKey, "true");
        }
      } catch {
        setShowForm(false);
      } finally {
        setLoading(false);
      }
    };

    // Check API when cache is not defined
    if (!localStorage.getItem(localStorageKey)) fetchFormData();
  }, []);

  if (loading) return <></>;

  // https://www.typeform.com/developers/embed/react/
  return showForm ? <Popover id="{{ EDLY_SELFHOSTED_FORM_ID }}" height="90vh" width="50vw" open="load" hidden={userData} onSubmit={handleOnSubmit} /> : <></>;
}
